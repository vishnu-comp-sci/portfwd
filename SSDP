#include <iostream>
#include <string>
#include <cstring>

#include <arpa/inet.h>
#include <netinet/in.h>
#include <sys/socket.h>

const int SSDP_PORT = 1900;
const char* SSDP_ADDR = "239.255.255.250";

const char* SSDP_MSEARCH = 
"M-SEARCH * HTTP/1.1\r\n"
"HOST: 239.255.255.250:1900\r\n"
"MAN: \"ssdp:discover\"\r\n"
"MX: 2\r\n"
"ST: upnp:rootdevice\r\n"
"\r\n";

int main() {

  int sockfd = socket(AF_INET, SOCK_DGRAM, 0);
  
  sockaddr_in ssdp_addr;
  ssdp_addr.sin_family = AF_INET;
  ssdp_addr.sin_port = htons(SSDP_PORT);
  inet_pton(AF_INET, SSDP_ADDR, &ssdp_addr.sin_addr);

  // Send M-SEARCH query
  sendto(sockfd, SSDP_MSEARCH, strlen(SSDP_MSEARCH), 0, 
          (struct sockaddr*)&ssdp_addr, sizeof(ssdp_addr));
          
  // Receive responses
  char buffer[1500];
  sockaddr_in router_addr;
  socklen_t router_addr_len = sizeof(router_addr);

  int n = recvfrom(sockfd, buffer, 1500, 0, 
                  (struct sockaddr*)&router_addr, &router_addr_len);
  buffer[n] = '\0';

  // Parse response to find location
  char* locIndex = strstr(buffer, "LOCATION:");
  if (!locIndex) {
    std::cout << "No location found" << std::endl;
    return 1;
  }

  char* locEnd = strstr(locIndex, "\r\n");
  std::string location(locIndex + 9, locEnd);

  // Extract hostname and port
  std::string hostname; 
  int port = 80;
  
  size_t slashIndex = location.find("/");
  if (slashIndex != std::string::npos) {
    hostname = location.substr(0, slashIndex);
    port = 80; 
  }

  size_t colonIndex = hostname.find(":");
  if (colonIndex != std::string::npos) {
    port = std::stoi(hostname.substr(colonIndex+1));
    hostname = hostname.substr(0, colonIndex);
  }

  std::cout << "Router IP: " << router_addr.sin_addr.s_addr << std::endl;
  std::cout << "Router hostname: " << hostname << std::endl;
  std::cout << "Router port: " << port << std::endl;

  return 0;
}
