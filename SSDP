#include <iostream>
#include <cstring>
#include <curl/curl.h>

const char* SSDP_MSEARCH = "M-SEARCH * HTTP/1.1\r\n"
                           "HOST: 239.255.255.250:1900\r\n"
                           "MAN: \"ssdp:discover\"\r\n"
                           "MX: 2\r\n"
                           "ST: urn:schemas-upnp-org:device:InternetGatewayDevice:1\r\n\r\n";

size_t WriteCallback(void* contents, size_t size, size_t nmemb, void* userp) {
    size_t realsize = size * nmemb;
    std::string* response = static_cast<std::string*>(userp);
    response->append(static_cast<char*>(contents), realsize);
    return realsize;
}

int main() {
    // Initialize libcurl
    CURL* curl;
    CURLcode res;
    curl = curl_easy_init();

    if (curl) {
        // Set the target address and port for SSDP
        curl_easy_setopt(curl, CURLOPT_URL, "http://239.255.255.250:1900");

        // Set the SSDP M-SEARCH request
        curl_easy_setopt(curl, CURLOPT_POSTFIELDS, SSDP_MSEARCH);
        curl_easy_setopt(curl, CURLOPT_POSTFIELDSIZE, strlen(SSDP_MSEARCH));

        // Receive responses in a string
        std::string response;
        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteCallback);
        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response);

        // Perform the HTTP request
        res = curl_easy_perform(curl);

        // Check for errors
        if (res != CURLE_OK) {
            std::cerr << "Error: " << curl_easy_strerror(res) << std::endl;
        } else {
            // Print the SSDP response, which may contain the URL
            std::cout << "SSDP Response:\n" << response << std::endl;
        }

        // Clean up libcurl
        curl_easy_cleanup(curl);
    }

    return 0;
}
