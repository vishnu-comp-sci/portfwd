#include <iostream>
#include <string>
#include <boost/asio.hpp>

namespace asio = boost::asio;
using asio::ip::udp;

int main() {
    try {
        asio::io_service io_service;

        // Create a socket for sending and receiving SSDP messages
        udp::socket socket(io_service, udp::endpoint(udp::v4(), 0));

        // Set the SSDP search target for UPnP root devices
        std::string searchTarget = "ssdp:all";

        // Send an M-SEARCH request for UPnP devices
        std::string request = "M-SEARCH * HTTP/1.1\r\n"
                             "HOST: 239.255.255.250:1900\r\n"
                             "ST: " + searchTarget + "\r\n"
                             "MX: 2\r\n"
                             "MAN: \"ssdp:discover\"\r\n\r\n";

        udp::resolver resolver(io_service);
        udp::resolver::query query(udp::v4(), "239.255.255.250", "1900");
        udp::resolver::iterator endpoint_iterator = resolver.resolve(query);

        // Send the M-SEARCH request to the multicast address
        socket.send_to(asio::buffer(request), *endpoint_iterator);

        // Receive SSDP responses
        while (true) {
            udp::endpoint sender_endpoint;
            char data[2048];
            size_t length = socket.receive_from(asio::buffer(data, sizeof(data)), sender_endpoint);

            // Parse and display SSDP response
            std::string response(data, length);
            std::cout << "Received SSDP Response:\n" << response << "\n\n";

            // Parse the response to find the URL (location) of the UPnP service
            size_t locationPos = response.find("LOCATION: ");
            if (locationPos != std::string::npos) {
                size_t locationEndPos = response.find_first_of("\r\n", locationPos);
                std::string location = response.substr(locationPos + 10, locationEndPos - locationPos - 10);
                std::cout << "Discovered UPnP service at URL: " << location << "\n";
            }
        }
    } catch (std::exception& e) {
        std::cerr << "Error: " << e.what() << std::endl;
    }

    return 0;
}
